# Shougo-san's plugins {{{
# ---------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_ft = ['c', 'cpp']
# }}}

# Syntax {{{
# ---------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['md', 'markdown']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
# }}}

# Complete {{{
# ---------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']

[[plugins]]
repo = 'ujihisa/neco-look'
on_ft = ['vim', 'memo', 'txt']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''

  let g:deoplete#enable_at_startup          = 1
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#auto_complete_delay        = 0
  let g:deoplete#enable_camel_case          = 1
  let g:deoplete#enable_ignore_case         = 1
  let g:deoplete#enable_smart_case          = 1
  let g:deoplete#enable_refresh_always      = 1
  let g:deoplete#file#enable_buffer_path    = 1
  let g:deoplete#max_list                   = 1000

  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"

  imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
'''
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
hook_add = '''
    let g:deoplete#sources#jedi#python_path = $HOME . '/.pyenv/shims/python'
'''
# }}}

# C / C++ {{{
# ---------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'zchee/libclang-python3'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
hook_source = '''
    if has('mac')
        let g:deoplete#sources#clang#libclnag_path = ''
        let g:deoplete#sources#clang#clang_header = ''
    elseif has('unix')
        let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-3.8/lib/libclang.so.1'
        let g:deoplete#sources#clang#clang_header = '/usr/include/clang/3.8/include/'
    endif
'''
depends = ['deoplete.nvim']

[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c', 'cpp']
hook_source = '''
nmap [prefix]cf <Plug>(operator-clang-format)
vmap [prefix]cf <Plug>(operator-clang-format)
'''
# }}}

# Web {{{
# ---------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-']
# }}}


# Python {{{
# ---------------------------------------------------------------------------------------------------
[[plugin]]
repo = "hynek/vim-python-pep8-indent"
on_ft = "python"

[[plugin]]
repo = "hachibeeDI/python_hl_lvar.vim"
on_ft = "python"


# }}}

# Unite {{{
# ---------------------------------------------------------------------------------------------------
[[plugins]]
repo = 'osyo-manga/unite-quickfix'
on_source = ['unite.vim']

[[plugins]]
repo = 'osyo-manga/unite-quickrun_config'
on_source = ['unite.vim']
# }}}

